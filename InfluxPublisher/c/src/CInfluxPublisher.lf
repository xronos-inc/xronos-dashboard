// SPDX-FileCopyrightText: Â© 2024 Xronos Inc.
// SPDX-License-Identifier: BSD-3-Clause

target C {
    files: [
        "telegraf-influx-publisher.h",
        "telegraf-influx-publisher.c"
    ],
    cmake-include: [
        "CMakeListsExtension.cmake"
    ],
    docker: {
        builder-base: "xronosinc/lf-trace-plugin-api:c",
        no-build: true
    },
    tracing: true,
    trace-plugin: "telegraf_lf_trace_plugin"
}

preamble {=
    #include "telegraf-influx-publisher.h"
=}

reactor InfluxLinePublisher(server_host: char[] = "0.0.0.0", server_port: int = 8094) {
    preamble {=
        #include <string.h>
    =}

    state telegraf_socket_fd: int = -1;
    state telegraf_session_initialized: bool = false;
    state telegraf_session_active: bool = false;
    state telegraf_server_ip: char[256] = {'\0'};

    reaction(startup) {=
        const char *env_host = getenv("LF_TELEGRAF_HOST_NAME");
        char server_host_evaluated[256] = {'\0'};
        if (env_host) {
            strncpy(server_host_evaluated, env_host, 255);
        } else {
            strncpy(server_host_evaluated, self->server_host, 255);
        }
        
        self->telegraf_socket_fd = telegraf_init_socket();
        if(self->telegraf_socket_fd == -1){
            lf_request_stop();
        }
        resolve_hostname(server_host_evaluated, self->telegraf_server_ip, 255);
        if(strcmp(server_host_evaluated, self->telegraf_server_ip) != 0){
            printf("Resolved telegraf hostname to %s\n", self->telegraf_server_ip);
        }
        printf("Publishing to telegraf at udp://%s:%d\n",
               server_host_evaluated,
               self->server_port);
    =}

    input line: char [4096];
    reaction(line){=
        if(!self->telegraf_session_initialized || self->telegraf_session_active){
            int retval = telegraf_send_data(
                self->telegraf_socket_fd,
                self->telegraf_server_ip,
                self->server_port,
                line->value,
                strlen(line->value));

            if(retval == 0){
                if(!self->telegraf_session_initialized){
                    printf("Successfully published to telegraf.\n");
                }
                self->telegraf_session_active = true;
            } else {
                printf("Failed to publish to telegraf. Disabling publishing.\n");
                self->telegraf_session_active = false;
            }

            self->telegraf_session_initialized = true;
        }
    =}

    reaction(shutdown) {=
        close(self->telegraf_socket_fd);
    =}
}

# Sine wave generator for testing
reactor SineWave(sample_rate_ms = 100 ms) {
    preamble {=
        #include <math.h>
    =}

    state influx_line: influxline_t;
    output measurement: char[4096];

    reaction(startup){=
        self->influx_line.measurement = "xronos-dashboard-test";
        self->influx_line.tags[0] = '\0';
        self->influx_line.fields[0] = '\0';
        tagset_append(self->influx_line.tags, TAGSET_MAX_LENGTH, "language", "c");
    =}

    timer t(0, sample_rate_ms)
    reaction(t) -> measurement {=
        self->influx_line.timestamp_ns = lf_time_physical();
        // for a single field, snprintf is nice shorthand,
        // but for multiple fields consider using tagset_append() instead
        snprintf(
            self->influx_line.fields,
            TAGSET_MAX_LENGTH,
            "data=%f",
            sin(lf_time_physical() / 1.0e9 * M_PI + M_PI ) );
        influxline_to_string(
            &self->influx_line,
            measurement->value,
            INFLUXDB_MAX_LINE_LENGTH);
        lf_set_present(measurement);
    =}
}

main reactor {
    publisher = new InfluxLinePublisher()
    producer = new SineWave()
    producer.measurement -> publisher.line
}
